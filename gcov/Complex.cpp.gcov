        -:    0:Source:Complex.cpp
        -:    1:#include "Complex.hpp"
        -:    2:#include <cmath>
        -:    3:#include <sstream>
        -:    4:
        -:    5:// Constructor
        5:    6:Complex::Complex(const double& re, const double& im) : _re(re), _im(im) {}
        -:    7:
        -:    8:// Getters
    #####:    9:double Complex::re() const {
    #####:   10:    return _re;
        -:   11:}
        -:   12:
    #####:   13:double Complex::im() const {
    #####:   14:    return _im;
        -:   15:}
        -:   16:
        -:   17:// Unary operators
    #####:   18:bool Complex::operator!() const {
    #####:   19:    return _re == 0 && _im == 0;
        -:   20:}
        -:   21:
    #####:   22:Complex Complex::operator-() const {
    #####:   23:    return Complex(-_re, -_im);
        -:   24:}
        -:   25:
        -:   26:// Binary operators
    #####:   27:Complex Complex::operator+(const Complex& other) const {
    #####:   28:    return Complex(_re + other._re, _im + other._im);
        -:   29:}
        -:   30:
    #####:   31:Complex& Complex::operator+=(const Complex& other) {
    #####:   32:    _re += other._re;
    #####:   33:    _im += other._im;
    #####:   34:    return *this;
        -:   35:}
        -:   36:
    #####:   37:Complex& Complex::operator-=(const Complex& other) {
    #####:   38:    _re -= other._re;
    #####:   39:    _im -= other._im;
    #####:   40:    return *this;
        -:   41:}
        -:   42:
    #####:   43:Complex& Complex::operator*=(const Complex& other) {
    #####:   44:    double new_re = _re * other._re - _im * other._im;
    #####:   45:    double new_im = _re * other._im + _im * other._re;
    #####:   46:    _re = new_re;
    #####:   47:    _im = new_im;
    #####:   48:    return *this;
        -:   49:}
        -:   50:
        -:   51:// Prefix increment
    #####:   52:Complex& Complex::operator++() {
    #####:   53:    _re++;
    #####:   54:    return *this;
        -:   55:}
        -:   56:
        -:   57:// Postfix increment
    #####:   58:Complex Complex::operator++(int) {
    #####:   59:    Complex copy = *this;
    #####:   60:    _re++;
    #####:   61:    return copy;
        -:   62:}
        -:   63:
    #####:   64:bool Complex::operator<(const Complex& other) const {
    #####:   65:    return std::hypot(_re, _im) < std::hypot(other._re, other._im);
        -:   66:}
        -:   67:
        6:   68:bool Complex::operator>(const Complex& other) const {
        6:   69:    return std::hypot(_re, _im) > std::hypot(other._re, other._im);
        -:   70:}
        -:   71:
        -:   72:// Friend global binary operators
    #####:   73:Complex operator-(const Complex& c1, const Complex& c2) {
    #####:   74:    return Complex(c1._re - c2._re, c1._im - c2._im);
        -:   75:}
        -:   76:
    #####:   77:Complex operator*(const Complex& c1, const Complex& c2) {
    #####:   78:    return Complex(c1._re * c2._re - c1._im * c2._im,
    #####:   79:                   c1._re * c2._im + c1._im * c2._re);
        -:   80:}
        -:   81:
        -:   82:const float TOLERANCE = 0.001;
        -:   83:
    #####:   84:bool operator==(const Complex& c1, const Complex& c2) {
    #####:   85:    return (std::abs(c1._re - c2._re) <= TOLERANCE && std::abs(c1._im - c2._im) <= TOLERANCE);
        -:   86:}
        -:   87:
    #####:   88:bool operator!=(const Complex& c1, const Complex& c2) {
    #####:   89:    return !(c1 == c2);
        -:   90:}
        -:   91:
        -:   92:// Friend global IO operators
     6450:   93:std::ostream& operator<<(std::ostream& output, const Complex& c) {
    6450*:   94:    output << c._re << (c._im >= 0 ? '+' : '-') << std::abs(c._im) << 'i';
     6450:   95:    return output;
        -:   96:}
    #####:   97:std::istream& operator>>(std::istream& input, Complex& c) {
    #####:   98:    double re = 0, im = 0;
        -:   99:    char ch1, ch2;
        -:  100:
    #####:  101:    if (input >> re >> ch1 >> im >> ch2 && ch2 == 'i') {
    #####:  102:        if (ch1 == '+') {
    #####:  103:            c._re = re;
    #####:  104:            c._im = im;
    #####:  105:        } else if (ch1 == '-') {
    #####:  106:            c._re = re;
    #####:  107:            c._im = -im;
        -:  108:        } else {
    #####:  109:            input.setstate(std::ios::failbit);
        -:  110:        }
        -:  111:    } else {
    #####:  112:        input.setstate(std::ios::failbit);
        -:  113:    }
        -:  114:
    #####:  115:    return input;
        -:  116:}
